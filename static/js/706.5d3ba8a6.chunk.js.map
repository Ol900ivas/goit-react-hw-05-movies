{"version":3,"file":"static/js/706.5d3ba8a6.chunk.js","mappings":"oWAEaA,EAAWC,EAAAA,EAAAA,GAAH,4EAMRC,EAAWD,EAAAA,EAAAA,GAAH,6CAIRE,EAAOF,EAAAA,EAAAA,EAAH,8CAGJG,EAAMH,EAAAA,EAAAA,EAAH,+C,SCsChB,EA/Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,uGACqBC,EAAAA,EAAAA,GAAUN,GAD/B,OACQO,EADR,OAEQC,EAAYD,EAAKE,KAAI,kBAA4C,CACrEC,GADyB,EAAGA,GAE5BC,KAFyB,EAAOA,KAGhCC,UAHyB,EAAaA,UAItCC,aAJyB,EAAwBA,aAAxB,IAM3BT,GAAQ,OAAII,IARd,4CAFc,0DACdM,EAWD,GAAE,CAACd,IAEmB,IAAhBG,EAAKY,QACV,SAACpB,EAAD,UACGQ,EAAKM,KAAI,SAAAO,GAAK,OACb,SAACnB,EAAD,WACE,4BACE,gBACEoB,IACED,EAAMH,aAAN,UACOK,EAAAA,IADP,OACkBF,EAAMH,cACpBM,EAENC,IAAKJ,EAAML,KACXU,MAAO,IACPC,OAAQ,OAEV,4BACE,SAACxB,EAAD,UAAOkB,EAAML,QACb,SAACZ,EAAD,0BACA,uBAAIiB,EAAMJ,mBAfDI,EAAMN,GADR,OAuBjB,uEAEH,C,0NCjDDa,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAEJ,IAAMN,EAAW,mCACXO,EAAa,mCAAG,+GAIfF,EAAAA,EAAAA,IAAU,uBAJK,uBAGfG,EAHe,EAGvBnB,KAAQmB,QAEVC,QAAQC,IAAI,YAAaF,GALA,kBAMlBA,GANkB,gCAQzBC,QAAQE,MAAR,MARyB,yDAAH,qDAYbC,EAAgB,mCAAG,WAAMC,GAAN,kGAIlBR,EAAAA,EAAAA,IAAU,gBAAiB,CACnCS,OAAQ,CAAED,MAAOA,KALS,uBAGlBL,EAHkB,EAG1BnB,KAAQmB,QAIVC,QAAQC,IAAI,eAAgBF,GAPA,kBAQrBA,GARqB,gCAU5BC,QAAQE,MAAR,MAV4B,yDAAH,sDAchBI,EAAc,mCAAG,WAAMjC,GAAN,kGAEHuB,EAAAA,EAAAA,IAAA,iBAAoBvB,IAFjB,uBAElBO,EAFkB,EAElBA,KACRoB,QAAQC,IAAI,aAAcrB,GAHA,kBAInBA,GAJmB,oGAAH,sDAYdD,EAAS,mCAAG,WAAMN,GAAN,kGAIXuB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,aAJW,uBAGXG,EAHW,EAGnBI,KAAQJ,KAEVwB,QAAQC,IAAI,QAASzB,GALA,kBAMdA,GANc,gCAQrBwB,QAAQE,MAAR,MARqB,yDAAH,sDAYTK,EAAY,mCAAG,WAAMlC,GAAN,kGAIduB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,aAJc,uBAGd0B,EAHc,EAGtBnB,KAAQmB,QAEVC,QAAQC,IAAI,WAAYF,GALA,kBAMjBA,GANiB,gCAQxBC,QAAQE,MAAR,MARwB,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","servises/fetch.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  max-width: 100px;\n`;\n\nexport const Name = styled.p`\n  font-weight: bold;\n`;\nexport const Par = styled.p`\n  font-style: italic;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast, imageUrl } from '../../servises/fetch';\nimport defaultProfilePhoto from '../../images/defaultProfilePhoto.png';\nimport { CastList, CastItem, Name, Par } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getCast();\n    async function getCast() {\n      const data = await fetchCast(movieId);\n      const movieCast = data.map(({ id, name, character, profile_path }) => ({\n        id,\n        name,\n        character,\n        profile_path,\n      }));\n      setCast([...movieCast]);\n    }\n  }, [movieId]);\n\n  return cast.length !== 0 ? (\n    <CastList>\n      {cast.map(actor => (\n        <CastItem key={actor.id}>\n          <div>\n            <img\n              src={\n                actor.profile_path\n                  ? `${imageUrl}${actor.profile_path}`\n                  : defaultProfilePhoto\n              }\n              alt={actor.name}\n              width={100}\n              height={150}\n            />\n            <div>\n              <Name>{actor.name}</Name>\n              <Par>character:</Par>\n              <p>{actor.character}</p>\n            </div>\n          </div>\n        </CastItem>\n      ))}\n    </CastList>\n  ) : (\n    <p>Sorry, there's no information about the cast</p>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '91d51c28e9627ca3e06710d14d157b60',\n};\nexport const imageUrl = 'https://image.tmdb.org/t/p/w300/';\nexport const fetchTrending = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/trending/movie/day');\n    console.log('Trending:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/search/movie', {\n      params: { query: query },\n    });\n    console.log('MovieByName:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    console.log('MovieById:', data);\n    return data;\n  } catch (error) {\n    // console.error(error.message);\n    // return error.message;\n    throw error;\n  }\n};\n\nexport const fetchCast = async movieId => {\n  try {\n    const {\n      data: { cast },\n    } = await axios.get(`/movie/${movieId}/credits`);\n    console.log('Cast:', cast);\n    return cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`/movie/${movieId}/reviews`);\n    console.log('Reviews:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["CastList","styled","CastItem","Name","Par","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","data","movieCast","map","id","name","character","profile_path","getCast","length","actor","src","imageUrl","defaultProfilePhoto","alt","width","height","axios","api_key","fetchTrending","results","console","log","error","fetchMovieByName","query","params","fetchMovieById","fetchReviews"],"sourceRoot":""}