{"version":3,"file":"static/js/157.a982c316.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","servises/fetch.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-bottom: 40px;\n  margin-top: 12px;\n`;\nexport const DetailsWrap = styled.div``;\nexport const MovieTitle = styled.h1`\n  margin-bottom: 20px;\n`;\nexport const Par = styled.p`\n  margin-bottom: 12px;\n`;\nexport const SubTitle = styled.h2`\n  margin-bottom: 20px;\n`;\nexport const Ul = styled.ul`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 20px;\n`;\nexport const Li = styled.li``;\n","import PropTypes from 'prop-types';\nimport defaultPoster from '../../images/defaultPoster.png';\nimport {\n  DetailsContainer,\n  DetailsWrap,\n  MovieTitle,\n  Par,\n  SubTitle,\n  Ul,\n  Li,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ poster, title, date, vote, overview, genres }) => {\n  const percentageVote = Math.round(vote * 10);\n  const releaseYear = new Date(date).getFullYear();\n  const imageUrl = 'https://image.tmdb.org/t/p/w300/';\n  return (\n    <DetailsContainer>\n      <img\n        src={poster ? `${imageUrl}${poster}` : defaultPoster}\n        alt={title}\n        width={360}\n      />\n      <DetailsWrap>\n        <MovieTitle>\n          {title} ({releaseYear})\n        </MovieTitle>\n        <Par>User score: {percentageVote}%</Par>\n        <SubTitle>Overview</SubTitle>\n        <Par>{overview}</Par>\n        <SubTitle>Genres</SubTitle>\n        <Ul>\n          {genres && genres.map(({ id, name }) => <Li key={id}>{name}</Li>)}\n        </Ul>\n      </DetailsWrap>\n    </DetailsContainer>\n  );\n};\n\nMovieCard.propTypes = {\n  poster: PropTypes.string,\n  title: PropTypes.string,\n  date: PropTypes.string,\n  vote: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default MovieCard;\n","import { useState, useEffect, Suspense, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\nimport { fetchMovieById } from '../servises/fetch';\nimport MovieCard from '../components/MovieCard/MovieCard';\nimport Loader from '../components/Loader/Loader';\nimport { SubTitle, Ul } from '../components/MovieCard/MovieCard.styled';\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  useEffect(() => {\n    getMovieById();\n    async function getMovieById() {\n      const data = await fetchMovieById(movieId);\n      setMovieInfo(data);\n    }\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieInfo;\n\n  return (\n    <main>\n      <Link to={backLinkLocation.current}>\n        <BsArrowLeft />\n        Go back\n      </Link>\n      <MovieCard\n        poster={poster_path}\n        title={title}\n        date={release_date}\n        vote={vote_average}\n        overview={overview}\n        genres={genres}\n      />\n      <SubTitle>Additional information</SubTitle>\n      <Ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </Ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '91d51c28e9627ca3e06710d14d157b60',\n};\nexport const imageUrl = 'https://image.tmdb.org/t/p/w300/';\nexport const fetchTrending = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/trending/movie/day');\n    console.log('Trending:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/search/movie', {\n      params: { query: query },\n    });\n    console.log('MovieByName:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    console.log('MovieById:', data);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  try {\n    const {\n      data: { cast },\n    } = await axios.get(`/movie/${movieId}/credits`);\n    console.log('Cast:', cast);\n    return cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`/movie/${movieId}/reviews`);\n    console.log('Reviews:', results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["DetailsContainer","styled","DetailsWrap","MovieTitle","Par","SubTitle","Ul","Li","poster","title","date","vote","overview","genres","percentageVote","Math","round","releaseYear","Date","getFullYear","src","defaultPoster","alt","width","map","id","name","useState","movieInfo","setMovieInfo","movieId","useParams","location","useLocation","backLinkLocation","useRef","state","from","useEffect","fetchMovieById","data","getMovieById","poster_path","release_date","vote_average","to","current","Suspense","fallback","Loader","axios","api_key","imageUrl","fetchTrending","results","console","log","error","fetchMovieByName","query","params","fetchCast","cast","fetchReviews"],"sourceRoot":""}