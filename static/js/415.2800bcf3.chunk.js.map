{"version":3,"file":"static/js/415.2800bcf3.chunk.js","mappings":"wNAEaA,EAAYC,EAAAA,EAAAA,IAAH,2GAMTC,EAAcD,EAAAA,EAAAA,IAAH,8VAcXE,EAAYF,EAAAA,EAAAA,GAAH,4D,mBClBTG,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OACV,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,WACE,gBACES,IAAKL,EAAW,UAPX,oCAOW,OAAiBA,GAAgBM,EACjDC,IAAI,GACJC,OAAQ,IACRC,MAAO,OAET,SAAChB,EAAD,UAAYQ,QAREF,EADR,KAejB,C,0HCUD,UA9Ba,WACX,OAA4BW,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,gHAE0BC,EAAAA,EAAAA,MAF1B,OAEUC,EAFV,OAIUC,EAAWD,EAAQhB,KAAI,kBAAiC,CAC5DC,GAD2B,EAAGA,GAE9BE,MAF2B,EAAOA,MAGlCD,YAH2B,EAAcA,YAAd,IAM7BW,GAAU,OAAII,IAVlB,gDAYIC,QAAQC,IAAR,MAZJ,0DAFc,0DACdC,EAgBD,GAAE,KAGD,6BACE,4CACA,SAAC,IAAD,CAAWvB,OAAQA,MAGxB,C,0NCvBDwB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAEJ,IAAMC,EAAW,mCACXR,EAAa,mCAAG,+GAIfM,EAAAA,EAAAA,IAAU,uBAJK,uBAGfL,EAHe,EAGvBQ,KAAQR,QAHe,kBAKlBA,GALkB,gCAOzBE,QAAQO,MAAR,MAPyB,yDAAH,qDAWbC,EAAgB,mCAAG,WAAMC,GAAN,kGAIlBN,EAAAA,EAAAA,IAAU,gBAAiB,CACnCO,OAAQ,CAAED,MAAOA,KALS,uBAGlBX,EAHkB,EAG1BQ,KAAQR,QAIVE,QAAQC,IAAIH,GAPgB,kBAQrBA,GARqB,gCAU5BE,QAAQO,MAAR,MAV4B,yDAAH,sDAchBI,EAAc,mCAAG,WAAMC,GAAN,kGAEHT,EAAAA,EAAAA,IAAA,iBAAoBS,IAFjB,uBAElBN,EAFkB,EAElBA,KACRN,QAAQC,IAAIK,GAHc,kBAInBA,GAJmB,gCAM1BN,QAAQO,MAAR,MAN0B,yDAAH,sDAUdM,EAAS,mCAAG,WAAMD,GAAN,kGAIXT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAJW,uBAGXE,EAHW,EAGnBR,KAAQQ,KAEVd,QAAQC,IAAIa,GALS,kBAMdA,GANc,gCAQrBd,QAAQO,MAAR,MARqB,yDAAH,sDAYTQ,EAAY,mCAAG,WAAMH,GAAN,kGAIdT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAJc,uBAGdd,EAHc,EAGtBQ,KAAQR,QAEVE,QAAQC,IAAIH,GALY,kBAMjBA,GANiB,gCAQxBE,QAAQO,MAAR,MARwB,yDAAH,qD","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home.jsx","servises/fetch.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 280px);\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.div`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 200ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 8px;\n  color: #000000;\n`;\n\n// From imageFinder=====================\n// export const Img = styled.img`\n//   width: 100%;\n//   height: 260px;\n//   object-fit: cover;\n//   transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n//   &:hover {\n//     transform: scale(1.03);\n//     cursor: zoom-in;\n//   }\n// `;\n\n// margin-top: 8px;\n//   margin-bottom: 0;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, MovieName } from './MovieList.styled';\nimport defaultPoster from '../../images/defaultPoster.png';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  const imageUrl = 'https://image.tmdb.org/t/p/w300/';\n  return (\n    <Container>\n      {movies.map(({ id, poster_path, title }) => (\n        <CardWrapper key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <img\n              src={poster_path ? `${imageUrl}${poster_path}` : defaultPoster}\n              alt=\"\"\n              height={360}\n              width={280}\n            />\n            <MovieName>{title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { fetchTrending } from '../servises/fetch';\nimport { MovieList } from 'components/MovieList/MovieList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies();\n    async function getTrendingMovies() {\n      try {\n        const results = await fetchTrending();\n\n        const movieSet = results.map(({ id, title, poster_path }) => ({\n          id,\n          title,\n          poster_path,\n        }));\n\n        setMovies([...movieSet]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      <MovieList movies={movies} />\n    </main>\n  );\n};\n\nexport default Home;\n","// 91d51c28e9627ca3e06710d14d157b60\n// For home\n//https://api.themoviedb.org/3/trending/movie/day?api_key=91d51c28e9627ca3e06710d14d157b60\n// \"id\": 868759,\n// \"title\": \"Ghosted\",\n// \"poster_path\": \"/liLN69YgoovHVgmlHJ876PKi5Yi.jpg\",\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '91d51c28e9627ca3e06710d14d157b60',\n};\nexport const imageUrl = 'https://image.tmdb.org/t/p/w300/';\nexport const fetchTrending = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/trending/movie/day');\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/search/movie', {\n      params: { query: query },\n    });\n    console.log(results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  try {\n    const {\n      data: { cast },\n    } = await axios.get(`/movie/${movieId}/credits`);\n    console.log(cast);\n    return cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`/movie/${movieId}/reviews`);\n    console.log(results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["Container","styled","CardWrapper","MovieName","MovieList","movies","location","useLocation","map","id","poster_path","title","to","state","from","src","defaultPoster","alt","height","width","useState","setMovies","useEffect","fetchTrending","results","movieSet","console","log","getTrendingMovies","axios","api_key","imageUrl","data","error","fetchMovieByName","query","params","fetchMovieById","movieId","fetchCast","cast","fetchReviews"],"sourceRoot":""}