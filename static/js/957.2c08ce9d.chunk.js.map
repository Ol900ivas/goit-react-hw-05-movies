{"version":3,"file":"static/js/957.2c08ce9d.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","servises/api.js"],"sourcesContent":["import defaultPoster from '../../images/defaultPoster.png';\n\nconst MovieCard = ({ poster, title, date, vote, overview, genres }) => {\n  const percentageVote = Math.round(vote * 10);\n  const releaseYear = new Date(date).getFullYear();\n  console.log(percentageVote);\n  console.log(releaseYear);\n  console.log(genres);\n  const imageUrl = 'https://image.tmdb.org/t/p/w300/';\n  return (\n    <>\n      <img\n        src={poster ? `${imageUrl}${poster}` : defaultPoster}\n        alt={title}\n        width={360}\n      />\n      <div>\n        <h2>\n          {title} ({releaseYear})\n        </h2>\n        <p>User score: {percentageVote}%</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <ul>\n          {genres && genres.map(({ id, name }) => <li key={id}>{name}</li>)}\n        </ul>\n      </div>\n    </>\n  );\n};\nexport default MovieCard;\n","import { useState, useEffect, Suspense, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getSearchMuvieById } from '../servises/api';\nimport MovieCard from '../components/MovieCard/MovieCard';\nimport Loader from '../components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  useEffect(() => {\n    getMovieById();\n    async function getMovieById() {\n      const data = await getSearchMuvieById(movieId);\n      setMovieInfo(data);\n    }\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieInfo;\n  console.log(location);\n  return (\n    <main>\n      <Link to={backLinkLocation.current}>Go back</Link>\n      <h1>Movie details: {movieId}</h1>\n      <MovieCard\n        poster={poster_path}\n        title={title}\n        date={release_date}\n        vote={vote_average}\n        overview={overview}\n        genres={genres}\n      />\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n\n// /movies/get - movie - details запит повної інформації\n//  про фільм для сторінки кінофільму.\n","// 91d51c28e9627ca3e06710d14d157b60\n// For home\n//https://api.themoviedb.org/3/trending/movie/day?api_key=91d51c28e9627ca3e06710d14d157b60\n// \"id\": 868759,\n// \"title\": \"Ghosted\",\n// \"poster_path\": \"/liLN69YgoovHVgmlHJ876PKi5Yi.jpg\",\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '91d51c28e9627ca3e06710d14d157b60',\n};\n\nexport const getTrending = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/trending/movie/day');\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getSearchMuvieByName = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get('/search/movie', {\n      params: { query: query },\n    });\n    console.log(results);\n    return results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getSearchMuvieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getSearchCast = async movieId => {\n  try {\n    const {\n      data: { cast },\n    } = await axios.get(`/movie/${movieId}/credits`);\n    console.log(cast);\n    return cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["poster","title","date","vote","overview","genres","percentageVote","Math","round","releaseYear","Date","getFullYear","console","log","src","defaultPoster","alt","width","map","id","name","useState","movieInfo","setMovieInfo","movieId","useParams","location","useLocation","backLinkLocation","useRef","state","from","useEffect","getSearchMuvieById","data","getMovieById","poster_path","release_date","vote_average","to","current","Suspense","fallback","Loader","axios","api_key","getTrending","results","error","getSearchMuvieByName","query","params","getSearchCast","cast"],"sourceRoot":""}